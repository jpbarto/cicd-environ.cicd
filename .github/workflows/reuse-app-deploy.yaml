name: CICD Application Deployment Pipeline
run-name: CICD App Deploy invoked for ${{ inputs.repository }}

on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
      release:
        required: true
        type: string
      tf_vars:
        required: true
        type: string
      helm_values:
        required: true
        type: string
      environment_name:
        required: true
        type: string
      application_name:
        required: true
        type: string
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      aws_session_token:
        required: true

#     outputs:
#       pow-result:
#         description: "The value of 2 to the power of pow-value"
#         value: ${{ jobs.calc_pow.outputs.result }}

jobs:
  Deploy-Application:
    runs-on: ubuntu-latest
    steps:
      - name: Print workflow metadata
        run: |
          echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
          echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
          echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
          echo "Run deploy for ${{ inputs.repository }} @ ${{ inputs.release }}"
          echo "Using TFVars file ${{ inputs.tf_vars }}"
          echo "using Helm values file ${{ inputs.helm_values }}"
          echo "For the ${{ inputs.environment_name }} environment"

      - name: Display the github object
        run: |
          echo GitHub event object is...
          cat <<EOF
          ${{ toJSON(github) }}
          EOF

      - name: Check out environment repository code
        uses: actions/checkout@v5
        with:
          path: "environment"

      - name: Check out repository code
        uses: actions/checkout@v5
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.release }}
          path: "application"

      - name: List directory contents
        run: |
          pwd
          tree
      - name: List the environment
        run: env

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1

      - name: Setup AWS CLI
        uses: ankurk91/install-aws-cli-action@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-session-token: ${{ secrets.aws_session_token }}
          aws-region: us-east-1

      - name: Verify AWS CLI
        run: |
          aws --version
          aws sts get-caller-identity

      - name: Prepare TF State bucket if not exist
        continue-on-error: true
        run: |
          aws s3 mb s3://cicd-environ-tofu-state-prod-ab12cf --region us-east-2

      - name: Configure OpenTofu backend
        run: |
          APP_TF_DIR=`find . -type d -exec sh -c '[ -f "$0"/main.tf ]' '{}' \; -print -quit`
          cp environment/terraform/backend.tf $APP_TF_DIR/cicd_backend.tf

      - name: Deploy the application
        working-directory: application
        env:
          TF_LOG: "DEBUG"
          TF_BACKEND_BUCKET: "cicd-environ-tofu-state-prod-ab12cf"
          TF_BACKEND_KEY: "${{ inputs.environment_name }}/${{ inputs.application_name }}/terraform.tfstate"
          TF_BACKEND_REGION: "us-east-2"
          TF_CLI_ARGS_init: "-var='cicd_environment_name=${{ inputs.environment_name }}' -var='cicd_application_name=${{ inputs.application_name }}'"
          TF_CLI_ARGS_plan: "-var-file=${{ github.workspace }}/environment/environment.tfvars -var-file=${{ github.workspace }}/environment/${{ inputs.tf_vars }}"
          TF_CLI_ARGS_apply: "-var-file=${{ github.workspace }}/environment/environment.tfvars -var-file=${{ github.workspace }}/environment/${{ inputs.tf_vars }}"
        run: |
          make cicd_deploy

      - run: echo "üçè This job's status is ${{ job.status }}."
